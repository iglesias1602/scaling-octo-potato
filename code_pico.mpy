from io import *
import utime
import math
from machine import Pin, Timer, ADC

pin_trigger = Pin(4, Pin.OUT)
pin_echo = Pin(3, Pin.IN)

led_red = Pin(0, Pin.OUT)
led_green = Pin(1, Pin.OUT)


valeur = 1

# Left Display
Ag = Pin(8,Pin.OUT) # Top
Bg = Pin(7,Pin.OUT) # Top Right
Cg = Pin(6,Pin.OUT) # Bottom Right
Dg = Pin(12,Pin.OUT) # Bottom
Eg = Pin(11,Pin.OUT)# Bottom Left
Fg = Pin(9,Pin.OUT)# Top Left
Gg = Pin(10, Pin.OUT)# Middle
DPg = Pin(5,Pin.OUT) # Decimal Point

# Right Display
Ad = Pin(20,Pin.OUT)    # Top
Bd = Pin(21,Pin.OUT)    # Top Right
Cd = Pin(22,Pin.OUT)    # Bottom Right
Dd = Pin(16,Pin.OUT)    # Bottom
Ed = Pin(17,Pin.OUT)    # Bottom Left
Fd = Pin(19,Pin.OUT)    # Top Left
Gd = Pin(18, Pin.OUT)   # Middle


leftDisplay = [Ag, Bg, Cg, Dg, Eg, Fg, Gg, DPg] # Left Display
rightDisplay = [Ad, Bd, Cd, Dd, Ed, Fd, Gd]    # Right Display

#common anode 7 segment
#    c b a g f d,e
chars = [
    [0,0,0,1,0,0,0,1], #0
    [0,0,1,1,1,1,1,1], #1
    [1,0,0,0,1,0,0,1], #2
    [0,0,0,0,1,0,1,1], #3
    [0,0,1,0,0,1,1,1], #4
    [0,1,0,0,0,0,1,1], #5
    [0,1,0,0,0,0,0,1], #6
    [0,0,0,1,1,1,1,1], #7
    [0,0,0,0,0,0,0,1], #8
    [0,0,0,0,0,0,1,1], #9
    ]

def init_leds():
    for i in range(4): # pin 0 à 3
         led = Pin(i)
         led.init(Pin.OUT) 

def set_leds(x):
    for i in range(4): # pin 0 à 3
         led = Pin(i)
         led.value(  (x>>i)%2 )       # la pin i prend la valeur du bit i de x
                                      # le reste de la division par 2 après décallage de i position vers la droite
                                      # (reste de la division par 2 == 1) <=> chiffre impair

def button_init():
    button = Pin(4)
    button.init(mode=Pin.IN,pull=Pin.PULL_UP)

def get_button():
    button = Pin(4)
    return button.value()

def count(display, number):
    if 0 <= number < len(chars):
        for i, element in enumerate(display):
            if 0 <= i < len(chars[number]):
                element.value(chars[number][i])
            else:
                print(f"Error: Invalid index {i} in chars[{number}]")
    else:
        print(f"Error: Invalid number {number} for chars")


def clear():
    for i in leftDisplay:
        i.value(1)
    for j in rightDisplay:
        j.value(1)

def init_timer():
    timer1 = Timer()
    timer1.init(freq=100.0,mode=Timer.PERIODIC,callback=check)

def init():
    init_timer()

def check(timer1):
    global valeur
    valeur = max(min(valeur, 999), 0)
    # By using valeur = max(min(valeur, 999), 0), the valeur variable is limited between 0 and 999,
    # which prevents "list index out of range" errors in the count()
    # function when trying to display numbers larger than what the display can handle.
    
    tens = valeur // 10
    units = valeur % 10

    if valeur < 100:
        count(leftDisplay, tens)
        count(rightDisplay, units)
    else:
        count(leftDisplay, valeur // 100)
        DPg.value(0)
        count(rightDisplay, (valeur % 100) // 10)

def main_loop():
    global valeur
    signal_on = 0
    signal_off = 0
    # Pull the trigger low and pause
    pin_trigger.low()
    utime.sleep_us(2)
    
    # Pull the trigger high for 5 us
    pin_trigger.high()
    utime.sleep_us(5)
    
    # Pull the trigger low
    pin_trigger.low()
    print('a')
    # Wait when echo is low and add timestamp for it
    while pin_echo.value() == 0:
        signal_off = utime.ticks_us()
    print('b')
    # Wait when echo is high and add timestamp for it
    while pin_echo.value() == 1:
        signal_on = utime.ticks_us()
        
    # Calculate time between on and of signal
    timepassed = signal_on - signal_off
    
    # Multiply the journey time by the speed of souind 0.0343 cm per microsecond
    object_distance = math.floor((timepassed * 0.0343) / 2)
    
    print("The distance from object is ",object_distance,"cm")
    valeur = object_distance

    if object_distance <= 24:
        led_red.value(0)
        led_green.value(1)
    else:
        led_red.value(1)
        utime.sleep_ms(100)
        led_red.value(0)
        led_green.value(0)
    print(valeur)
    utime.sleep_ms(500)
    

init()
while 1:
    main_loop()
    print(valeur)
    utime.sleep_ms(20)
    clear()

